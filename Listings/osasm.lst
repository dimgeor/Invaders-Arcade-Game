


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123/MSP432
    4 00000000         ; Lab 4 starter file
    5 00000000         ; March 25, 2016
    6 00000000         
    7 00000000         ;
    8 00000000         
    9 00000000         
   10 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   11 00000000                 THUMB
   12 00000000                 REQUIRE8
   13 00000000                 PRESERVE8
   14 00000000         
   15 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           SysTick_Handler
   18 00000000                 IMPORT           Scheduler
   19 00000000                 EXPORT           PendSV_Handler
   20 00000000         
   21 00000000         
   22 00000000         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   23 00000000 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   24 00000002 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             registers, R4-R11,
                                                             SP moves to R4
   25 00000006 4814            LDR              R0, =RunPt  ; 4) R0 = pointer t
                                                            o RunPt (pointer to
                                                             pointer?), old thr
                                                            ead
   26 00000008 6801            LDR              R1, [R0]    ;    R1 = RunPt
   27 0000000A F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   28 0000000E         ;LDR R1, [R1,#4]     ; 6) R1 = RunPt->next
   29 0000000E         ;STR R1, [R0]      ;    RuntPt = R1
   30 0000000E B501            PUSH             {R0,LR}     ; Push LR because t
                                                            he following BL cal
                                                            l will use that reg
                                                            ister (don't want t
                                                            o kill the 0xFFFFFF
                                                            F9 that's there for
                                                             ISR), push R0 to k
                                                            eep stack push/pops
                                                             even
   31 00000010 F7FF FFFE       BL               Scheduler   ; Call external C f
                                                            unction, RunPt = Ru
                                                            nPt->next
   32 00000014 E8BD 4001       POP              {R0,LR}     ; Pop LR (restore 0
                                                            xFFFFFFF9 so ISR ca
                                                            n properly finish),
                                                             pop R0 to keep sta
                                                            ck push/pops even
   33 00000018 6801            LDR              R1, [R0]    ; Load new value of



ARM Macro Assembler    Page 2 


                                                             RunPtr to R1 (new 
                                                            thread) (R1 now poi
                                                            nts to new thread)
   34 0000001A F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RuntPt->sp
   35 0000001E E8BD 0FF0       POP              {R4-R11}    ; 8) Restore regs R
                                                            4-R11
   36 00000022 B662            CPSIE            I           ; 9) tasks run with
                                                             interrupts enabled
                                                            
   37 00000024 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   38 00000026         
   39 00000026         StartOS
   40 00000026 480C            LDR              R0, =RunPt  ; Load address of R
                                                            unPt into R0
   41 00000028 6802            LDR              R2, [R0]    ; Load value at R0 
                                                            to R2, R2 now equal
                                                            s address that RunP
                                                            t was pointing to. 
                                                            In this case that w
                                                            ould be the stack p
                                                            ointer of the first
                                                             TCB.
   42 0000002A F8D2 D000       LDR              SP, [R2]    ; System Stack Poin
                                                            ter now points to s
                                                            tack of first TCB
   43 0000002E E8BD 0FF0       POP              {R4-R11}    ; Restore registers
                                                             R4-R11 from stack
   44 00000032 BC0F            POP              {R0-R3}     ; Restore registers
                                                             R0-R3 from stack
   45 00000034 F85D CB04       POP              {R12}       ; Restore R12 from 
                                                            stack
   46 00000038 B001            ADD              SP,SP,#4    ; Skip over LR from
                                                             initial stack, not
                                                             relevant to initia
                                                            l thread run
   47 0000003A F85D EB04       POP              {LR}        ; Pop what used to 
                                                            be PC into LR, PC v
                                                            alue is start of th
                                                            read program
   48 0000003E B001            ADD              SP,SP,#4    ; Skip over PSR (Pr
                                                            ocess Status Regist
                                                            er), process never 
                                                            ran, so PSR is of n
                                                            o significance
   49 00000040 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   50 00000042 4770            BX               LR          ; start first threa
                                                            d
   51 00000044         
   52 00000044         PendSV_Handler
   53 00000044 4804            LDR              R0, =RunPt  ; run this thread n
                                                            ext
   54 00000046 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   55 00000048 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin



ARM Macro Assembler    Page 3 


                                                            ter;
   56 0000004C E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   57 00000050 F06F 0E06       LDR              LR,=0xFFFFFFF9
   58 00000054 4770            BX               LR          ; start next thread
                                                            
   59 00000056 00 00           ALIGN
   60 00000058                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\osasm.d -o.\objects\osasm.o -I.\RTE\_Invaders_arcade -IC
:\Users\user\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Us
ers\user\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --p
redefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 534" --predefine="
_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --li
st=.\listings\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 10 in file osasm.s
   Uses
      None
Comment: .text unused
PendSV_Handler 00000044

Symbol: PendSV_Handler
   Definitions
      At line 52 in file osasm.s
   Uses
      At line 19 in file osasm.s
Comment: PendSV_Handler used once
StartOS 00000026

Symbol: StartOS
   Definitions
      At line 39 in file osasm.s
   Uses
      At line 16 in file osasm.s
Comment: StartOS used once
SysTick_Handler 00000000

Symbol: SysTick_Handler
   Definitions
      At line 22 in file osasm.s
   Uses
      At line 17 in file osasm.s
Comment: SysTick_Handler used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 15 in file osasm.s
   Uses
      At line 25 in file osasm.s
      At line 40 in file osasm.s
      At line 53 in file osasm.s

Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 18 in file osasm.s
   Uses
      At line 31 in file osasm.s
Comment: Scheduler used once
2 symbols
342 symbols in table
